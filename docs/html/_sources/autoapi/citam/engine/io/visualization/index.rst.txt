:py:mod:`citam.engine.io.visualization`
=======================================

.. py:module:: citam.engine.io.visualization

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   citam.engine.io.visualization.export_possible_oneway_aisles_to_svg
   citam.engine.io.visualization.create_arrow_svg_paths
   citam.engine.io.visualization.create_markers_svg_paths
   citam.engine.io.visualization.export_nav_network_to_svg
   citam.engine.io.visualization.export_world_to_svg
   citam.engine.io.visualization.add_root_layer_to_svg



Attributes
~~~~~~~~~~

.. autoapisummary::

   citam.engine.io.visualization.X_MARKER
   citam.engine.io.visualization.LINE_MARKER
   citam.engine.io.visualization.PLUS_MARKER
   citam.engine.io.visualization.LOG


.. py:data:: X_MARKER
   :annotation: = 1

   
















   ..
       !! processed by numpydoc !!

.. py:data:: LINE_MARKER
   :annotation: = 2

   
















   ..
       !! processed by numpydoc !!

.. py:data:: PLUS_MARKER
   :annotation: = 3

   
















   ..
       !! processed by numpydoc !!

.. py:data:: LOG
   

   
















   ..
       !! processed by numpydoc !!

.. py:function:: export_possible_oneway_aisles_to_svg(walls: List[svgpathtools.Path], oneway_network: networkx.Graph, svgfile: Union[str, pathlib.Path]) -> None

   
   Export the one_way network superimposed on the floorplan to an SVG file.

   :param walls: All the walls found in the floorplan.
   :type walls: List[Path]
   :param oneway_network: The one-way network.
   :type oneway_network: nx.Graph
   :param svgfile: location to save the SVG file.
   :type svgfile: Union[str, pathlib.Path]















   ..
       !! processed by numpydoc !!

.. py:function:: create_arrow_svg_paths(arrow: Tuple[Tuple[int, int], Tuple[int, int]]) -> Tuple[List[svgpathtools.Path], List[Dict[str, Any]]]

   
   Given two points, create an arrow-like SVG element with the first point as
   the head.

   :param arrow: The haid and tail xy coordinates of the arrow.
   :type arrow: Tuple[Tuple[int,int], Tuple[int,int]]
   :return: List of paths and attributes (color, stroke size, etc.)
   :rtype: Tuple[List[Path], List[Dict[str, str]]















   ..
       !! processed by numpydoc !!

.. py:function:: create_markers_svg_paths(x: int, y: int, marker_type: int = None) -> Tuple[List[svgpathtools.Path], List[Dict[str, Any]]]

   
   Create SVG paths for arbitrary markers to be used on a floorplan.

   :param x: the x position of the marker
   :type x: int
   :param y: the y position of the marker
   :type y: int
   :param marker_type: the type of the marker (e.g. a plus sign, a line, etc.)
   :type marker_type: int, optional
   :return: The SVG paths and attributes
   :rtype: Tuple[List[Path], List[Dict[str, Any]]]















   ..
       !! processed by numpydoc !!

.. py:function:: export_nav_network_to_svg(walls: List[svgpathtools.Path], nav_paths: List[svgpathtools.Path], nav_nodes: List[Tuple[int, int]], filename: Union[str, pathlib.Path], marker_type: int = X_MARKER, color='blue') -> None

   
   Export a navigation network superimposed on a floorplan to an SVG file.

   :param walls: All the walls in the floorplan.
   :type walls: List[Path]
   :param nav_paths: The navigation paths of the navnet.
   :type nav_paths: List[Path]
   :param nav_nodes: The key nodes of the navnet to show on the map.
   :type nav_nodes: List[Tuple[int, int]]
   :param filename: The output file location.
   :type filename: Union[str, pathlib.Path]
   :param marker_type: The type of markers , defaults to X_MARKER
   :type marker_type: str, optional
   :param color: The color to used to represent the navnet, defaults to "blue"
   :type color: str, optional















   ..
       !! processed by numpydoc !!

.. py:function:: export_world_to_svg(walls: List[svgpathtools.Path], agent_positions_and_contacts: List[Tuple[int, int, int]], svg_file: Union[str, pathlib.Path], marker_locations: List[Tuple[int, int, int]] = [], marker_type: int = None, arrows: List[Tuple[Tuple[int, int], Tuple[int, int]]] = [], doors: List[svgpathtools.Path] = [], max_contacts: int = 100, current_time: int = None, show_colobar=False, viewbox: Tuple[float, Ellipsis] = None) -> None

   
   Save a snapshot of a simulation with the floorplan, agent positions and
   number of contacts, doors and any markers to an SVG file.

   :param walls: All the walls in the floorplan.
   :type walls: List[Path]
   :param agent_positions_and_contacts: positions and number of contacts for
           each agent.
   :type agent_positions_and_contacts: List[Tuple[int, int, int]]
   :param svg_file: Location of the output SVG file.
   :type svg_file: Union[str, pathlib.Path]
   :param marker_locations: xy positions of any markers, defaults to []
   :type marker_locations: List[Tuple[int, int, int]], optional
   :param marker_type: the type of marker to use, defaults to None
   :type marker_type: int, optional
   :param arrows: list of heads and tails for any arrow, defaults to []
   :type arrows: List[Tuple[int, int], Tuple[int, int]], optional
   :param doors: list of door elements, defaults to []
   :type doors: List[Path], optional
   :param max_contacts: The maximum number of contacts to use for the
           colorbar, defaults to 100
   :type max_contacts: int, optional
   :param current_time: the time to show on the clock, defaults to None
   :type current_time: int, optional
   :param show_colobar: whether to show a colorbar or not, defaults to False
   :type show_colobar: bool, optional
   :param viewbox: the viewbox of the SVG, defaults to None
   :type viewbox: Tuple[float, ...], optional















   ..
       !! processed by numpydoc !!

.. py:function:: add_root_layer_to_svg(original_svg_filename: Union[str, pathlib.Path], updated_filename: Union[str, pathlib.Path]) -> None

   
   Helper function to update an existing SVG file to add a root element.

   :param original_svg_filename: Initial SVG file.
   :type original_svg_filename: Union[str, pathlib.Path]
   :param updated_filename: new SVG file to write.
   :type updated_filename: Union[str, pathlib.Path]















   ..
       !! processed by numpydoc !!

