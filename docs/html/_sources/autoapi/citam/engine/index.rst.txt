:py:mod:`citam.engine`
======================

.. py:module:: citam.engine


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   core/index.rst
   facility/index.rst
   io/index.rst
   map/index.rst
   schedulers/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   constants/index.rst
   main/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   citam.engine.parse_input_file
   citam.engine.run_simulation
   citam.engine.engine_run



Attributes
~~~~~~~~~~

.. autoapisummary::

   citam.engine.LOG


.. py:function:: parse_input_file(input_file: Union[str, pathlib.Path]) -> Dict[str, Any]

   
   Read primary simulation input file in json format, validate values,
   load floorplans and returns dictionary of model inputs.

   :param input_file: path to input file expected in json format
   :type input_file: Union[str, pathlib.Path]
   :raises ValueError: If unable to decode JSON file.
   :raises FileNotFoundError: If the file is not found.
   :raises MissingInputError: If a required value is not found
   :raises TypeError: If incorrect value type is found for one or more inputs.
   :raises ValueError: If an input value is invalid.
   :raises FileNotFoundError: If path to another to a meetings policy is file
           is not valid.
   :raises FileNotFoundError: If path to another to a scheduling policy is
           file is not valid.
   :return: dictionary of inputs
   :rtype: Dict[str, Any]















   ..
       !! processed by numpydoc !!

.. py:function:: run_simulation(inputs: dict)

   
   Perform an agent-based simulation given a dictionary of input values

   :param inputs: Dictionary of input values















   ..
       !! processed by numpydoc !!

.. py:data:: LOG
   

   

.. py:function:: engine_run(**kwargs)

   
   Run a simulation

   This method is executed with the CLI call ``citam engine run``















   ..
       !! processed by numpydoc !!

