:py:mod:`citam.engine.core.simulation`
======================================

.. py:module:: citam.engine.core.simulation

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   citam.engine.core.simulation.Simulation




Attributes
~~~~~~~~~~

.. autoapisummary::

   citam.engine.core.simulation.LOG


.. py:data:: LOG
   

   
















   ..
       !! processed by numpydoc !!

.. py:class:: Simulation(facility: citam.engine.facility.indoor_facility.Facility, total_timesteps: int, n_agents: int, calculators: Optional[List[citam.engine.calculators.calculator.Calculator]] = None, scheduler: Optional[citam.engine.schedulers.scheduler.Scheduler] = None, dry_run=False)

   
   Implements a CITAM indoor Agent-Based Modeling simulation.

   Given a facility and simulation inputs, this implements routines to
   initialize the agents and their scheduels, run a simulation and output
   results to file.















   ..
       !! processed by numpydoc !!
   .. py:method:: create_sim_hash(self)

      
      Hash simulation inputs, scheduling policy, meetings policy,
      navigation policy, floorplan and navigation data to generate a unique
      ID for each simulation.
















      ..
          !! processed by numpydoc !!

   .. py:method:: run_serial(self, workdir: Union[str, os.PathLike, bytes], sim_name: str, run_name: str) -> None

      
      Run a CITAM simulation serially (i.e. only one core will be used).

      The serial runner is understandably slow because at each timestep,
      contacts have to be computed while taking into account the specific
      layout of the facility. A parallel version that computes contacts
      for timestep blocks is desirable.

      :param workdir: The directory where all results are to saved.
      :type workdir: str
      :raises ValueError: If occupancy rate is not between 0.0 and 1.0















      ..
          !! processed by numpydoc !!

   .. py:method:: run_simulation_and_save_results(self, workdir: Union[str, bytes, os.PathLike]) -> None

      
      Perform simulation and save results to files.

      :param workdir: path where results are saved.
      :type workdir: str















      ..
          !! processed by numpydoc !!

   .. py:method:: create_agents(self) -> List[citam.engine.schedulers.schedule.Schedule]

      
      Generate a list of schedules, one per agent.

      :raises ValueError: If an entrance could not be found















      ..
          !! processed by numpydoc !!

   .. py:method:: step(self, traj_outfile: TextIO = None) -> None

      
      Move the simulation one step ahead.

      At each step, agents are advanced one step ahead in their itineraries
      and contact statistics are computed.

      :param traj_outfile: File to write trajectory data, defaults to None
      :type traj_outfile: TextIO, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: move_agents(self) -> Tuple[List[citam.engine.core.agent.Agent], List[citam.engine.core.agent.Agent]]

      
      Iterate over agents and move them to the next position in their
      itinerary. Active agents are agents currently in the facility and
      moving agents are agents currently moving from one location to the
      next.

      :return: list of active and moving agents
      :rtype: Tuple[List[Agent], List[Agent]]















      ..
          !! processed by numpydoc !!

   .. py:method:: save_manifest(self, work_directory: str, sim_name: str, run_name: str) -> None

      
      Save manifest file, used by the dashboard to show results.

      :param work_directory:  top level directory where all simulation
          outputs are saved.
      :type work_directory: str















      ..
          !! processed by numpydoc !!

   .. py:method:: save_maps(self, work_directory: str) -> None

      
      Save svg maps for each floor for visualization. Each floor map is
      saved in a separate subdirectory (created if not found).

      :param work_directory: top level directory where all simulation
              outputs are saved.
      :type work_directory: str















      ..
          !! processed by numpydoc !!

   .. py:method:: save_schedules(self, work_directory: str) -> None

      
      Write agent schedules to file.

      :param work_directory: directory where output files are to be saved.
      :type work_directory: str
      :param scheduler: Scheduler agent used in this simulation.
      :type scheduler: Scheduler















      ..
          !! processed by numpydoc !!


