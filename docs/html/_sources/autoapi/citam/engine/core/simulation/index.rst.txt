:py:mod:`citam.engine.core.simulation`
======================================

.. py:module:: citam.engine.core.simulation

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   citam.engine.core.simulation.Simulation




Attributes
~~~~~~~~~~

.. autoapisummary::

   citam.engine.core.simulation.LOG


.. py:data:: LOG
   

   
















   ..
       !! processed by numpydoc !!

.. py:class:: Simulation(facility: citam.engine.facility.indoor_facility.Facility, total_timesteps: int, n_agents: int, shifts: List[Dict], buffer: int = 300, occupancy_rate: float = None, timestep: float = 1.0, contact_distance: float = 6.0, meetings_policy_params=None, create_meetings=True, close_dining=False, scheduling_policy=None, dry_run=False, preassigned_offices: Optional[List[Tuple[int, int]]] = None)

   
   Implements a CITAM indoor Agent-Based Modeling simulation.

   Given a facility and simulation inputs, this implements routines to
   initialize the agents and their scheduels, run a simulation and output
   results to file.















   ..
       !! processed by numpydoc !!
   .. py:method:: create_sim_hash(self)

      
      Hash simulation inputs, scheduling policy, meetings policy,
      navigation policy, floorplan and navigation data to generate a unique
      ID for each simulation.
















      ..
          !! processed by numpydoc !!

   .. py:method:: generate_meetings(self) -> None

      
      Create meetings based on meeting policy.
















      ..
          !! processed by numpydoc !!

   .. py:method:: run_serial(self, workdir: str, sim_name: str, run_name: str) -> None

      
      Run a CITAM simulation serially (i.e. only one core will be used).

      The serial runner is understandably slow because at each timestep,
      contacts have to be computed while taking into account the specific
      layout of the facility. A parallel version that computes contacts
      for timestep blocks is desirable.

      :param workdir: The directory where all results are to saved.
      :type workdir: str
      :raises ValueError: If occupancy rate is not between 0.0 and 1.0















      ..
          !! processed by numpydoc !!

   .. py:method:: run_simulation_and_save_results(self, workdir: str) -> None

      
      Perform simulation and save results to files.

      :param workdir: path where results are saved.
      :type workdir: str















      ..
          !! processed by numpydoc !!

   .. py:method:: assign_office(self) -> Tuple[int, int]

      
      Assign an office to the current agent. If office spaces are not
      pre-assigned, select one randomly and remove it from list of available
      offices. Otherwise, return the next office from the queue.

      :return: office id and floor
      :rtype: Tuple[int, int]















      ..
          !! processed by numpydoc !!

   .. py:method:: add_agents_and_build_schedules(self) -> None

      
      Add the specified number of agents to the facility and create a
      schedule and an itinerary for each of them.

      :raises ValueError: If an entrance could not be found















      ..
          !! processed by numpydoc !!

   .. py:method:: identify_xy_proximity(self, positions_vector: numpy.ndarray) -> numpy.ndarray

      
      Compute pairwise distances, given a vector of xy positions, and
      return the indices of the ones that fall within the given contact
      distance.

      :param positions_vector: Array of current xy positions of all active
              agents
      :type positions_vector: np.ndarray
      :return: Array of indices of agents that are within the contact
          distance of each other
      :rtype: np.ndarray















      ..
          !! processed by numpydoc !!

   .. py:method:: identify_contacts(self, agents: List[citam.engine.core.agent.Agent]) -> None

      
      Iterate over agents, compute whether they fall within the contact
      distance or not and verify that they are indeed making contact (based
      on whether they are in the same space or not).

      :param agents: list of agents under consideration for contact
          statistics
      :type agents: List[Agent]















      ..
          !! processed by numpydoc !!

   .. py:method:: verify_and_add_contact(self, floor_number: int, agent1: citam.engine.core.agent.Agent, agent2: citam.engine.core.agent.Agent)

      
      Verify if agents are in nearby hallways before creating contact event.

      :param floor_number: [description]
      :type floor_number: int
      :param agent1: First agent
      :type agent1: Agent
      :param agent2: Second agent
      :type agent2: Agent















      ..
          !! processed by numpydoc !!

   .. py:method:: add_contact_event(self, agent1: citam.engine.core.agent.Agent, agent2: citam.engine.core.agent.Agent) -> None

      
      Record contact event between agent1 and agent2.

      :param agent1: The first agent.
      :type agent1: Agent
      :param agent2: The second agent.
      :type agent2: Agent















      ..
          !! processed by numpydoc !!

   .. py:method:: step(self, traj_outfile: TextIO = None, contact_outfiles: List[TextIO] = None) -> None

      
      Move the simulation one step ahead.

      At each step, agents are advanced one step ahead in their itineraries
      and contact statistics are computed.

      :param traj_outfile: File to write trajectory data, defaults to None
      :type traj_outfile: TextIO, optional
      :param contact_outfiles: Files to write contact data, one per floor,
              defaults to None
      :type contact_outfiles: List[TextIO], optional















      ..
          !! processed by numpydoc !!

   .. py:method:: move_agents(self) -> Tuple[List[citam.engine.core.agent.Agent], List[citam.engine.core.agent.Agent]]

      
      Iterate over agents and move them to the next position in their
      itinerary. Active agents are agents currently in the facility and
      moving agents are agents currently moving from one location to the
      next.

      :return: list of active and moving agents
      :rtype: Tuple[List[Agent], List[Agent]]















      ..
          !! processed by numpydoc !!

   .. py:method:: extract_contact_distribution_per_agent(self) -> Tuple[List[str], List[int]]

      
      Compute and return total contacts per agent.

      :return: List of agent ids and their total contacts
      :rtype: Tuple[List[int], List[int]]















      ..
          !! processed by numpydoc !!

   .. py:method:: save_manifest(self, work_directory: str, sim_name: str, run_name: str) -> None

      
      Save manifest file, used by the dashboard to show results.

      :param work_directory:  top level directory where all simulation
          outputs are saved.
      :type work_directory: str















      ..
          !! processed by numpydoc !!

   .. py:method:: save_maps(self, work_directory: str) -> None

      
      Save svg maps for each floor for visualization. Each floor map is
      saved in a separate subdirectory (created if not found).

      :param work_directory: top level directory where all simulation
              outputs are saved.
      :type work_directory: str















      ..
          !! processed by numpydoc !!

   .. py:method:: create_svg_heatmap(self, contacts_per_coord: Dict[Tuple[int, int], int], floor_directory: str) -> None

      
      Create and save a heatmap from coordinate contact data.

      :param contacts_per_coord: dictionary where each key is an (x,y )
              tuple and values are the number of contacts in that location.
      :type contacts_per_coord: Dict[Tuple[int, int], int]
      :param floor_directory: directory to save the heatmap file.
      :type floor_directory: str
      :raises FileNotFoundError: if the floor svg map file is not found.















      ..
          !! processed by numpydoc !!

   .. py:method:: save_schedules(self, work_directory: str) -> None

      
      Write schedules and meetings to file.

      Three files are created: one for all the
      meetings, one for the full schedule of all the agents and the last one
      with each agent's assigned office.

      :param work_directory: directory where output files are to be saved.
      :type work_directory: str















      ..
          !! processed by numpydoc !!

   .. py:method:: save_outputs(self, work_directory: str) -> None

      
      Write output files to the output directory

      :param work_directory: directory where all output files are to be
          saved.
      :type work_directory: str















      ..
          !! processed by numpydoc !!


