:py:mod:`citam.engine.map.floorplan`
====================================

.. py:module:: citam.engine.map.floorplan


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   citam.engine.map.floorplan.Floorplan



Functions
~~~~~~~~~

.. autoapisummary::

   citam.engine.map.floorplan.floorplan_from_directory



Attributes
~~~~~~~~~~

.. autoapisummary::

   citam.engine.map.floorplan.LOG


.. py:data:: LOG
   

   

.. py:class:: Floorplan(scale: float, spaces: List[citam.engine.map.space.Space], doors: List[citam.engine.map.door.Door], walls: List[svgpathtools.Line], aisles: Tuple[svgpathtools.Line, svgpathtools.Line], minx: float, miny: float, maxx: float, maxy: float, floor_name='0', special_walls: List[svgpathtools.Line] = None, traffic_policy: List[Dict[str, Any]] = None, assign_doors_on_load: bool = False)

   Class to represent and manipulate a floorplan in a given facility.
















   ..
       !! processed by numpydoc !!

   .. py:method:: match_doors_and_spaces(self) -> None

      Iterate over all doors and create references to corresponding spaces.
      This is useful when recreating a floorplan from serialized data.
















      ..
          !! processed by numpydoc !!


   .. py:method:: find_space_by_id(self, space_id: int) -> Optional[citam.engine.map.space.Space]

      Find and return the space object that has the given id.

      :param space_id: The ID of the space of interest.
      :type space_id: int
      :return: The space that has this ID, None if no match found.
      :rtype: Space















      ..
          !! processed by numpydoc !!


   .. py:method:: place_agent(self, agent: citam.engine.core.agent.Agent, pos: Tuple[int, int]) -> None

      Position an agent in a given x, y position on this floor

      :param agent: The agent to place on this floor.
      :type agent: Agent
      :param pos: The xy location to place the agent.
      :type pos: Tuple[int, int]















      ..
          !! processed by numpydoc !!


   .. py:method:: remove_agent(self, agent: citam.engine.core.agent.Agent) -> None

      Remove the agent from the floor and set its position to None.

      :param agent: the agent to remove from this floor.
      :type agent: Agent















      ..
          !! processed by numpydoc !!


   .. py:method:: move_agent(self, agent: citam.engine.core.agent.Agent, pos: Tuple[int, int]) -> None

      Move an agent from its current position to a new position.

      :param agent: Agent object to move. Assumed to have its current
              location stored in a 'pos' tuple.
      :type agent: Agent
      :param pos: Tuple of new position to move the agent to.
      :type pos: Tuple[int, int]















      ..
          !! processed by numpydoc !!


   .. py:method:: identify_this_location(self, x: int, y: int, include_boundaries=True) -> Optional[int]

      Given a point given by its xy coords, find the space inside of which it
      is located. Returns the space integer id.

      :param x: x-coordinate position
      :type x: int
      :param y: y-coordinate position
      :type y: int
      :param include_boundaries: whether to include space boundaries in the
          definition of the space, defaults to True
      :type include_boundaries: bool, optional
      :return: The index of the space where this position falls.
      :rtype: Optional[int]















      ..
          !! processed by numpydoc !!


   .. py:method:: get_room_exit_coords(self, room_id: int) -> Optional[List[Tuple[int, int]]]

      Given a room id, find the exit coords (xy point at the middle of the
      door)

      :param room_id: [description]
      :type room_id: int
      :return: The xy coordinates where an agent can exit this space.
      :rtype: Optional[Tuple[int, int]]















      ..
          !! processed by numpydoc !!


   .. py:method:: export_to_svg(self, svg_file: Union[str, pathlib.Path], include_doors=False) -> None

      Export the current floorplan to an SVG file.

      Each space is written to file as a path element. Doors are written
      seperately as path element as well.

      :param svg_file: location where to save the file.
      :type svg_file: Union[str, pathlib.Path]
      :param include_doors: Whether to include doors in the SVG file or not,
               defaults to False
      :type include_doors: bool, optional















      ..
          !! processed by numpydoc !!


   .. py:method:: _as_dict(self) -> Dict[str, Any]

      Return the floorplan as a dictionary. The "assign_doors_on_load" flag
      is added so that doors can be reassigned to the appropirate spaces
      when the object is recreated.

      :return: A dictionary representing this floorplan
      :rtype: Dict[str, Any]















      ..
          !! processed by numpydoc !!


   .. py:method:: to_json_file(self, json_file: Union[str, pathlib.Path]) -> None

      Export extracted floorplan data to a json file.

      :param json_file: location of the json file to write to.
      :type json_file: Union[str, pathlib.Path]















      ..
          !! processed by numpydoc !!



.. py:function:: floorplan_from_directory(directory: Union[str, pathlib.Path], floor: str, **kwargs) -> Floorplan

   Load a floorplan from a given floorplan directory. The floorplan is
   expected to be in a file named floorplan.json or updated_floorplan.json

   .. note:: additional kwargs will be passed to the Floorplan constructor

   :param directory: Floorplan Directory
   :type directory: Union[str, pathlib.Path]
   :param floor: Name of the floor being imported
   :type floor: str
   :raises FileNotFoundError: If floorplan file cannot be found
   :raises NotADirectoryError: path does not reference a valid directory
   :raises NotADirectoryError: [description]
   :raises FileNotFoundError: [description]
   :return: Floorplan instance found in this directory.
   :rtype: Floorplan















   ..
       !! processed by numpydoc !!


