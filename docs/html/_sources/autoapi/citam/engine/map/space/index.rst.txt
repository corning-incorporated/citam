:py:mod:`citam.engine.map.space`
================================

.. py:module:: citam.engine.map.space


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   citam.engine.map.space.Space




.. py:class:: Space(path: svgpathtools.Path, boundaries: svgpathtools.Path, id: str, unique_name: str, building: str, space_function: str, facility: str = None, floor: str = None, space_category: str = None, capacity: int = None, department: str = None, square_footage: float = None)

   Class to manage all types of spaces within a facility (a space can be a
   room, a hallway or any navigable area within a facility)
















   ..
       !! processed by numpydoc !!

   .. py:method:: __eq__(self, other) -> bool

      Check if two spaces are equal (meaning they are the same space in real
      life). This function does not compare door objects directly as they
      hold references to space objects which in turn hold references to door
      objects and would therefore cause a recursion error.

      :param other: The space to compare this space to.
      :type other: Space
      :return: Whether the spaces are the same or not.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: __hash__(self)

      Return hash(self).
















      ..
          !! processed by numpydoc !!


   .. py:method:: __str__(self)

      Return str(self).
















      ..
          !! processed by numpydoc !!


   .. py:method:: _as_dict(self) -> Dict[str, Any]

       Return this space object as a dictionary. Note: this operation
      ignores any reference to door objects which must be recreated
      at the floorplan level when a space object is to be recreated.

      :return: Dictionary representation of this space.
      :rtype: Dict[str, Any]















      ..
          !! processed by numpydoc !!


   .. py:method:: is_point_on_space_walls(self, test_point: citam.engine.map.point.Point) -> bool

      Verify if a given point falls on one of the walls of this space.

      :param test_point: The point of interest.
      :type test_point: Point
      :return: Whether the point is on a wall.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_point_on_space_boundaries(self, test_point: citam.engine.map.point.Point) -> bool

      Verify if a given point falls on one of the boundaries of this space.

      :param test_point: The point of interest.
      :type test_point: Point
      :return: Whether the point is on a boundary.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_point_inside_space(self, test_point: citam.engine.map.point.Point, include_boundaries=False) -> bool

      Check if a given point falls inside this space.

      :param test_point: The point of interest.
      :type test_point: Point
      :param include_boundaries: Whether to include the boundaries or not,
           defaults to False
      :type include_boundaries: bool, optional
      :return: Whether the point falls inside or not.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: infinite_line_intersection_test(self, test_point: citam.engine.map.point.Point) -> bool

      Create s set of infinite lines starting from the test point and count
      the number of intersections with the space boundaries.
      If the number of intesections is odd for any test line, return True.
      Return False otherwise.

      :param test_point: The test point of interest.
      :type test_point: Point
      :return: Whether the number of intersections is odd for any test line.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: get_random_internal_point(self) -> citam.engine.map.point.Point

      Return a randomly selected point inside this space.

      :return: xy coordinates of the point.
      :rtype: Point















      ..
          !! processed by numpydoc !!


   .. py:method:: is_space_a_hallway(self) -> bool

      Verify is this space is a hallway.

      :return: Whether this space is a hallway or not.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_space_an_office(self) -> bool

      Verify if this space is an office.

      :return: Whether this space is an office or not.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_space_a_cafeteria(self) -> bool

      Verify if this space is a cafeteria.

      :return: Whether this space is a cafeteria or not.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_space_a_lab(self) -> bool

      Verify if this space is a lab.

      :return: Whether this space is a lab or not
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_space_a_meeting_room(self) -> bool

      Verify if this space is meeting room.

      :return: Whether this space is a meeting room or not.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_space_a_restroom(self) -> bool

      Verify if this space is a restroom.

      :return: Whether this space is a restroom or not.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: is_space_vertical(self) -> bool

      Check if this space is a stair or an elevator that can be used for
      regular navigation.

      :return: Whether the space is vertical.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. py:method:: get_space_coords(self) -> Tuple[int, int]

      Compute coordinates of the geometric center of this space

      :return: The xy coordinates of the center.
      :rtype: Tuple[int, int]















      ..
          !! processed by numpydoc !!



