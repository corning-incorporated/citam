:py:mod:`citam.engine.map.updater`
==================================

.. py:module:: citam.engine.map.updater


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   citam.engine.map.updater.FloorplanUpdater




Attributes
~~~~~~~~~~

.. autoapisummary::

   citam.engine.map.updater.LOG


.. py:data:: LOG
   

   

.. py:class:: FloorplanUpdater(floorplan: citam.engine.map.floorplan.Floorplan, svg_file: Union[str, pathlib.Path] = None, csv_file: Union[str, pathlib.Path] = None)

   
   Class to update an existing floorplan from SVG and CSV files.
















   ..
       !! processed by numpydoc !!
   .. py:method:: update_from_csv_data() -> None

      
      Update space properties in floorplan using data from CSV file

      ..Note:: Cannot change space unique names















      ..
          !! processed by numpydoc !!

   .. py:method:: read_updated_svg_file() -> Tuple[List[svgpathtools.Path], List[svgpathtools.Path]]

      
      Read edited SVG file and extract wall and door paths.

      :return: List of wall and door paths from SVG file.
      :rtype: Tuple[List[Path], List[Path]]















      ..
          !! processed by numpydoc !!

   .. py:method:: find_special_walls(svg_wall_paths: List[svgpathtools.Line]) -> None

      
      Compared walls from svg file to exising walls and identify new or
      edited walls as special walls

      :param svg_wall_paths: List of path elements representing the walls
           from the SVG file.
      :type svg_wall_paths: List[Line]















      ..
          !! processed by numpydoc !!

   .. py:method:: remove_door_from_spaces(door: citam.engine.map.door.Door) -> None

      
      Remove door from corresponding spaces.

      :param door: The door to remove from the facility.
      :type door: Door















      ..
          !! processed by numpydoc !!

   .. py:method:: find_doors_to_remove() -> List[citam.engine.map.door.Door]

      
      Go through existing doors and check if they overal with any special
      walls. If so, tag them for removal

      :return: List of doors to remove.
      :rtype: List[Door]















      ..
          !! processed by numpydoc !!

   .. py:method:: run() -> None

      
      Run the floorplan update process using data from provided csv
      and svg files.
















      ..
          !! processed by numpydoc !!

   .. py:method:: update_from_svg_data(svg_wall_paths: List[svgpathtools.Path], svg_door_paths: List[svgpathtools.Path]) -> None

      
      Read SVG file to extract walls and door info and update floorplan
      object accordingly.

      :param svg_wall_paths: List of paths representing walls.
      :type svg_wall_paths: List[Path]
      :param svg_door_paths: List of paths representing doors.
      :type svg_door_paths: List[Path]















      ..
          !! processed by numpydoc !!

   .. py:method:: find_spaces_for_door(door_path: svgpathtools.Path) -> Tuple[Optional[citam.engine.map.space.Space], Optional[citam.engine.map.space.Space]]

      
      Given a door path, check which spaces are on both sides of the door.

      ..Note:: Only line objects are supported (BezierCurves are not).

      :param door_path: the door of interest.
      :type door_path: Path
      :return: Spaces of either side of the door, None if not found.
      :rtype: Tuple[Optional[Space], Optional[Space]]















      ..
          !! processed by numpydoc !!

   .. py:method:: overlap_door_with_wall(new_door: svgpathtools.Line, max_distance_to_walls=3.0) -> svgpathtools.Line

      
      Verify if new door lines as provided by user overlap with existing
      walls. If so, update walls accordingly (carve out door segment) and
      update door path as necessary (e.g. translate and change orientation
      to match be perfectly superimposed on wall).

      :param new_door: New door objects.
      :type new_door: Line
      :param max_distance_to_walls: Distance beyond which door is considered
          too far to belong to a given wall, defaults to 3.0
      :type max_distance_to_walls: float, optional
      :return: The door line after any changes.
      :rtype: Line















      ..
          !! processed by numpydoc !!

   .. py:method:: process_new_doors(svg_door_paths: List[svgpathtools.Line], updated_doors: List[citam.engine.map.door.Door]) -> None

      
      Iterate over door paths extracted from svg file and process them
      for addition to the floorplan.

      :param svg_door_paths: List of door paths extracted from svg file.
      :type svg_door_paths: List[Line]
      :param updated_doors: List of door objects to add new doors to.
      :type updated_doors: List[Door]















      ..
          !! processed by numpydoc !!

   .. py:method:: find_spaces_of_point(point: citam.engine.map.point.Point) -> List[int]

      
      Find all spaces that a point belongs to. This should always be
      one unless the point is on a door line or a space boundary.

      :param point: Point object of interest
      :type point: Point
      :return: List of spaces to which the point belongs.
      :rtype: List[int]















      ..
          !! processed by numpydoc !!


