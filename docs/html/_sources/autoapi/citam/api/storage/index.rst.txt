:py:mod:`citam.api.storage`
===========================

.. py:module:: citam.api.storage

.. autoapi-nested-parse::

   
















   ..
       !! processed by numpydoc !!


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   local/index.rst
   s3/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   citam.api.storage.BaseStorageDriver




.. py:exception:: NoResultsFoundError

   Bases: :py:obj:`OSError`

   
   Error raised when no results were found by the driver
















   ..
       !! processed by numpydoc !!

.. py:class:: BaseStorageDriver(**kwargs)

   Bases: :py:obj:`abc.ABC`

   
   Base class for CITAM storage engines
















   ..
       !! processed by numpydoc !!
   .. py:method:: list_runs(self) -> List[str]
      :abstractmethod:

      
      List all simulations

      :return: A list of completed simulations















      ..
          !! processed by numpydoc !!

   .. py:method:: get_coordinate_distribution_file(self, sim_id: str, floor: str) -> TextIO
      :abstractmethod:

      
      Return the Coordinate Distribution file for a simulation

      :param sim_id: simulation identifier
      :param floor: Floor number
      :return: Coordinate Distribution file















      ..
          !! processed by numpydoc !!

   .. py:method:: get_trajectory_file(self, sim_id: str) -> TextIO
      :abstractmethod:

      
      Return the trajectory file for a simulation

      :param sim_id: simulation identifier
      :return: Trajectory file















      ..
          !! processed by numpydoc !!

   .. py:method:: get_trajectory_file_location(self, sim_id: str) -> os.PathLike
      :abstractmethod:

      
      Return the trajectory file for a simulation

      :param sim_id: simulation identifier
      :return: Trajectory file















      ..
          !! processed by numpydoc !!

   .. py:method:: get_contact_file(self, sim_id: str, floor: str) -> TextIO
      :abstractmethod:

      
      Return the contact file for a simulation

      :param sim_id: simulation identifier
      :param floor: Floor number
      :return: Contacts file















      ..
          !! processed by numpydoc !!

   .. py:method:: get_map_file(self, sim_id: str, floor: str) -> io.BytesIO
      :abstractmethod:

      
      Return the map image for given simulation

      :param sim_id: simulation identifier
      :param floor: Floor number
      :return: Map file















      ..
          !! processed by numpydoc !!

   .. py:method:: get_manifest_file(self, sim_id: str) -> TextIO
      :abstractmethod:

      
      Return the manifest file for a simulation

      :param sim_id: simulation identifier
      :return: Simulation manifest file















      ..
          !! processed by numpydoc !!

   .. py:method:: get_heatmap_file(self, sim_id: str, floor: str) -> io.BytesIO
      :abstractmethod:

      
      Return a heatmap file for a simulation and floor

      :param sim_id: simulation identifier
      :param floor: Floor number
      :return: Heatmap File















      ..
          !! processed by numpydoc !!

   .. py:method:: get_pair_contact_file(self, sim_id: str) -> TextIO
      :abstractmethod:

      
      Return the pair contact file for a simulation

      :param sim_id: simulation identifier
      :return: Pair contact file















      ..
          !! processed by numpydoc !!

   .. py:method:: get_statistics_file(self, sim_id: str) -> TextIO
      :abstractmethod:

      
      Get the statistics file for a simulation

      :param sim_id: simulation identifier















      ..
          !! processed by numpydoc !!

   .. py:method:: get_policy_file(self, sim_id: str) -> TextIO
      :abstractmethod:

      
      Get the statistics file for a simulation

      :param sim_id: simulation identifier















      ..
          !! processed by numpydoc !!

   .. py:method:: get_manifest(self, sim_id: str) -> Dict

      
      Return the parsed manifest for a simulation

      :param sim_id: simulation identifier
      :return: Simulation Manifest















      ..
          !! processed by numpydoc !!


