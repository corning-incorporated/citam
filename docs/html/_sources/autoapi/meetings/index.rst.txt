:mod:`meetings`
===============

.. py:module:: meetings


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   meetings.Meeting
   meetings.MeetingPolicy




Attributes
~~~~~~~~~~

.. autoapisummary::

   meetings.LOG


.. data:: LOG
   

   

.. class:: Meeting(location: citam.engine.map.space.Space, floor_number: int, start_time: int, end_time: int, attendees: List[int] = None)


   Class to manage meeting instances.
















   ..
       !! processed by numpydoc !!

   .. method:: __str__(self) -> str

      Generate a string representation of this meeting.

      :return: The string representing this meeting
      :rtype: str















      ..
          !! processed by numpydoc !!


   .. method:: __eq__(self, other) -> bool

      Return self==value.
















      ..
          !! processed by numpydoc !!



.. class:: MeetingPolicy(meeting_rooms: List[List[citam.engine.map.space.Space]], agent_ids: List[int], daylength: int, policy_params: Dict[str, Any] = None)


   Class to implement a meeting policy defining all the meetings that take
   place in a facility based on predefined parameters.
















   ..
       !! processed by numpydoc !!

   .. method:: create_new_meeting(self, meeting_room: citam.engine.map.space.Space, floor_number: int, start_time: int, end_time: int) -> bool

      [summary]

      :param meeting_room: Space where the meeting room will take place.
      :type meeting_room: Space
      :param floor_number: index of the floor.
      :type floor_number: int
      :param start_time: The meeting start time.
      :type start_time: int
      :param end_time: The meeting end time.
      :type end_time: int
      :return: True if meeting successfully created. False, otherwise.
      :rtype: bool















      ..
          !! processed by numpydoc !!


   .. method:: _create_meetings_for_room(self, meeting_room: citam.engine.map.space.Space, floor_number: int) -> None

      Create all meetings to take place in this specific room.

      :param meeting_room: The meeting room of interest.
      :type meeting_room: Space
      :param floor_number: Index of the floor of this meeting room.
      :type floor_number: int















      ..
          !! processed by numpydoc !!


   .. method:: _generate_meeting_attendee_list(self, meeting_room: citam.engine.map.space.Space, start_time: int, end_time: int) -> List[int]

      Randomly add attendees to a meeting time slot based on agents'
      availability.

      :param meeting_room: The meeting room
      :type meeting_room: Space
      :param start_time: When the meeting starts
      :type start_time: int
      :param end_time: When the meeting ends.
      :type end_time: int
      :return: The list of selected agents (given by their ids).
      :rtype: List[int]















      ..
          !! processed by numpydoc !!


   .. method:: create_all_meetings(self) -> None

      Create meetings for this facility with no conflicts (room nor agent)
















      ..
          !! processed by numpydoc !!


   .. method:: _find_potential_attendees(self, start_time: int, end_time: int) -> List[int]

      Find all individuals in attendee pool who are free between start and
      end time to be later added to a meeting within that time period.

      :param start_time: Start time of the meeting.
      :type start_time: int
      :param end_time: End time of the meeting.
      :type end_time: int
      :return: List of potential attendees
      :rtype: List[int]















      ..
          !! processed by numpydoc !!


   .. method:: _update_attendee_pool(self) -> None

      Update the attendee pool to ensure the average
      number of meetings per agent is not exceeded
















      ..
          !! processed by numpydoc !!


   .. method:: get_daily_meetings(self, agent_id: int) -> List[Meeting]

      Returns the list of meetings for a given agent.

      :param agent_id: Id of the agent of interest.
      :type agent_id: int
      :return: The list of meetings for this agent.
      :rtype: List[Meeting]















      ..
          !! processed by numpydoc !!



