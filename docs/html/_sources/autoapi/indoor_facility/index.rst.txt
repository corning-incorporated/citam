:mod:`indoor_facility`
======================

.. py:module:: indoor_facility


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   indoor_facility.Facility




Attributes
~~~~~~~~~~

.. autoapisummary::

   indoor_facility.LOG


.. data:: LOG
   

   

.. class:: Facility(floorplans: List[citam.engine.map.floorplan.Floorplan], entrances: List[Dict], facility_name: str, traffic_policy: List[Dict[str, Any]] = None, navigation: citam.engine.facility.navigation.Navigation = None)


   Facility class to manage an indoor facility with one or more floors.

   Supports the designation of entrances/exits, navigation and traffic policy.















   ..
       !! processed by numpydoc !!

   .. method:: choose_best_entrance(self, office_floor: int, office_id: int) -> Tuple[Optional[citam.engine.map.door.Door], Optional[int]]

      Find the facility entrance that offers the fastest route to an agent's
      assigned office space.

      :param office_floor: index of the floor where this office is located.
      :type office_floor: int
      :param office_id: index of the office space
      :type office_id: int
      :return: best entrance door and floor number of best entrance
      :rtype: Tuple[Door, int]















      ..
          !! processed by numpydoc !!


   .. method:: validate_entrances(self)

      Iterate over possible entrances and verify that there is indeed
      an outside facing door and that the door is present in the navnet.
















      ..
          !! processed by numpydoc !!


   .. method:: is_door_in_navnet(self, entrance_floor: int, entrance_door: citam.engine.map.door.Door) -> bool

      Verify if a given door is part of the navnet.

      :param int entrance_floor: index of the entrance floor.
      :param Door entrance_door: door object to check.
      :return: True if door is part of navnet, False otherwise.















      ..
          !! processed by numpydoc !!


   .. method:: find_floor_by_name(self, floor_name: str) -> Optional[int]

      Find the floor that corresponds to this name.

      :param floor_name: Name of the floor.
      :type floor_name: str
      :return: index of the floorplan. None if not found.
      :rtype: Optional[int]















      ..
          !! processed by numpydoc !!


   .. method:: find_space_by_name(self, fp_index: int, ename: str) -> Optional[int]

      Find the space that corresponds to a given name. Mostly used to find
      the space that corresponds to a user-given entrance.

      :param fp_index: index of the floorplan that contains the space.
      :type fp_index: int
      :param ename: name of the space.
      :type ename: str
      :return: index of the space. None if not found.
      :rtype: Optional[int]















      ..
          !! processed by numpydoc !!


   .. method:: find_possible_entrance_doors(self, entrance_floor: int, entrance_space: citam.engine.map.space.Space) -> List[citam.engine.map.door.Door]

      Iterate over all doors in the facility to identify any that belong to
      the entrance floor and entrance space and are outside facing.

      :param entrance_floor: index of the floor of interest.
      :type entrance_floor: int
      :param entrance_space: The space where to look for doors.
      :type entrance_space: Space
      :return: List of possible entrance doors.
      :rtype: List[Door]















      ..
          !! processed by numpydoc !!


   .. method:: group_spaces(self) -> None

      Iterate over all spaces and group them according to their function.
















      ..
          !! processed by numpydoc !!


   .. method:: find_and_remove_unreachable_rooms(self)

      Iterate over all spaces and remove the unreachable ones.
















      ..
          !! processed by numpydoc !!


   .. method:: get_entrance_floor_and_space_id(self, entrance: Dict[str, Any]) -> Tuple[int, int]

      Given an entrance dictionary, find the corresponding floor name and
       space ID.

      :param entrance: Dictionary describing an entrance as from user inputs.
      :type entrance: Dict[str, Any]
      :raises ValueError: If floor is not found.
      :raises ValueError: If space is not found
      :return: Inex of the entrance floor and the entrance space from the
              floorplan.
      :rtype: Tuple[int, int]















      ..
          !! processed by numpydoc !!



